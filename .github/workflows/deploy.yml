# This action file handles the deployment of GLM project.
# - Builds docker image for GLM.
# - Pushes image to hub.ncsa.illinois.edu with its respective tag.
# - Sets up SSH to VM and pulls the new image.
name: GLM Build & Deploy

# Controls when the action will run. Triggers the workflow on push
# and pull request events for main and develop branches only.
on:
  push:
    branches:
      - main
#      - develop
  pull_request:
    branches:
      - main
#      - develop

jobs:
  build-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        name:
          - glm
        include:
          - name: prod
            host: seagrant-prod.ncsa.illinois.edu
            file-path: /home/ubuntu/glm
            description: "GLM Geodashboard Production Image"
#          - name: dev
#            host: seagrant-dev.ncsa.illinois.edu
#            file-path: /home/ubuntu/glm
#            description: "GLM Geodashboard Development Image"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - # Generates the tags and gets the version number from package.json files
        # For develop branch, image is tagged with `develop` and the git sha of the latest commit
        # For main branch, image is tagged with `latest` and the version number in their package.json
        name: Gather Information
        id: info
        env:
          PROJECT_NAME: glm
          HUB_REPO: hub.ncsa.illinois.edu/geostreams
          GITHUB_SHA: ${{ github.sha }}
        run: |
          TARGET_BRANCH=${GITHUB_REF#refs/*/}
          echo ${TARGET_BRANCH}
          VERSION="$(grep version package.json | awk -F \" '{print $4}')"
          echo -n > .env
          if [ "$TARGET_BRANCH" == "main" ]; then
            TAGS="${HUB_REPO}/${PROJECT_NAME}:latest,${HUB_REPO}/${PROJECT_NAME}:${VERSION}"
            PUSH_IMAGE=true
          elif [ "$TARGET_BRANCH" == "develop" ]; then
            TAGS="${HUB_REPO}/${PROJECT_NAME}:develop,${HUB_REPO}/${PROJECT_NAME}:sha-${GITHUB_SHA::8}"
            PUSH_IMAGE=true
          else
            PUSH_IMAGE=false
          fi
          echo "HOST=${{ matrix['host'] }}" >> $GITHUB_ENV
          echo "::set-output name=push_image::${PUSH_IMAGE}"
          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=tags::${TAGS}"
          echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Hub
        uses: docker/login-action@v1
        with:
          registry: hub.ncsa.illinois.edu
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_PASSWORD }}
      - # Docker build and push action.
        # Attaches tags generated above and labels to the image before pushing
        name: Build and Push Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ steps.info.outputs.push_image }}
          context: .
          file: ./Dockerfile
          tags: ${{ steps.info.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            image.title=${{ matrix['description'] }}
            image.version=${{ steps.info.outputs.version }}
            image.created=${{ steps.info.outputs.created }}
            image.revision=${{ github.sha }}
      - name: Setup SSH to VM
        if: ${{ env.SSH_HOST }}
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          cat >>~/.ssh/config <<END
          Host vm
            HostName $SSH_HOST
            User ubuntu
            IdentityFile ~/.ssh/deploy_key.pem
            StrictHostKeyChecking no
          END
      - # Establishes SSH connection to the VM, pulls most recent image and starts it up
        name: Update Image in VM
        if: ${{ env.SSH_HOST }}
        env:
          HUB_USER: ${{ secrets.HUB_USERNAME }}
          HUB_PASS: ${{ secrets.HUB_PASSWORD }}
          FILE_PATH: ${{ matrix.file-path }}
        run: |
          ssh vm "sleep 5 && cd $FILE_PATH && ./restart.sh"
